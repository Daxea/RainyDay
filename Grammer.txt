SCRIPT = (IMPORTS)(MODULE)(TYPE-DEF)*

IMPORTS = (use IDENTIFIER SEMI)*

MODULE = module IDENTIFIER(DOT IDENTIFIER)* SEMI

TYPE-DEF = type IDENTIFIER BLOCK-START TYPE-BODY BLOCK-END

TYPE-BODY = (MEMBER)*

MEMBER = TYPE-SPEC IDENTIFIER FUNCTION |
         TYPE-SPEC IDENTIFIER PROPERTY |
         TYPE-SPEC IDENTIFIER FIELD SEMI

FUNCTION = PARAMETERS BLOCK

PARAMETERS = PARAM-START (TYPE-SPEC IDENTIFIER (COMMA TYPE-SPEC IDENTIFIER)*) PARAM-END

PROPERTY = BLOCK-START (get PROPERTY-BODY) (set PROPERTY-BODY) BLOCK-END
           BLOCK-START (set PROPERTY-BODY) (get PROPERTY-BODY) BLOCK-END

PROPERTY-BODY = LAMBDA | BLOCK

FIELD = (ASSIGN EXPRESSION)

BLOCK = BLOCK-START STATEMENTS BLOCK-END

LAMBDA = LAMBDA-OP BLOCK |
         LAMBDA-OP STATEMENT SEMI

STATEMENTS = STATEMENT SEMI (STATEMENT SEMI)*

STATEMENT = BLOCK |
            VARAIBLE-DECL |
            ASSIGNMENT |
            RETURN EXPRESSION |
            BRANCH |
            NO-OP

ASSIGNMENT = VARIABLE ASSIGN EXPRESSION

EXPRESSION = TERM (ADD | SUBTRACT TERM)*

TERM = FACTOR (MULTIPLY | DIVIDE FACTOR)*

FACTOR = UNARY-OP FACTOR |
         INCREMENT-BY-ONE FACTOR |
         DECREMENT-BY-ONE FACTOR |
         NUMBER (INCREMENT-BY-ONE) |
         NUMBER (DECREMENT-BY-ONE) |
         STRING | CHAR | BOOLEAN |
         PARAM-START EXPRESSION PARAM-END |
         VARIABLE

NUMBER = Int32 | Single

BRANCH = PARAM-START EXPRESSION PARAM-END BLOCK (else BRANCH)* (else BLOCK | STATEMENT SEMI) |
         PARAM-START EXPRESSION PARAM-END STATEMENT SEMI (else BRANCH)* (else BLOCK | STATEMENT SEMI)

VARIABLE-DECL = VARIABLE (COMMA VARIABLE)* COLON TYPE-SPEC (ASSIGN EXPRESSION)

VARIABLE = IDENTIFIER

// TypeSpec does not need to dive any deeper. It just assumes that the value of the current token is a Type.
TYPE-SPEC = PRIMITIVE-TYPE | USER-TYPE